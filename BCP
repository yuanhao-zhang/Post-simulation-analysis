import numpy as np


mass=[0, 1.0, 5.7, 5.7, 0.2, 2.3, 2.0]

N_polymer = 54 #PMLiTFSI
N_homo = 0 #POEM

L_homo = 0
LA = 14 #backbone length of POEM
LB = 74 #backbone length of PS
L_polymer = LA + LB
F_A = 0.409
EOLi=16


L_branch_poly = 11 # branch length of BCP
L_branch_homo = 0 # branch length of homopolymer additive

Branchinterval_poly = 0 
Branchinterval_homo = 0

bcpbackboneAty = 2
bcpbackboneBty = 3
bcpbranchty = 1
homobackbonety = 1
homobranchty = 1

cationty = 4
anionAty = 5
anionBty = 6

bcpbackboneAbty = 2
bcpbackboneBbty = 2
bcpbranchbty = 1
anionbty = 4
abtyp = 3

bcpbackboneBaty = 2
bcpbackboneAaty = 2
bcpbranchaty = 1

bonda = 1.0
bondb = 2.0
bondc = 1.0
density = 0.4
cdens = 0.015
N_layer = 2
N_rep = 2


N_branch_poly = N_polymer   * int(LA / (Branchinterval_poly + 1))     * L_branch_poly * N_rep
N_branch_homo = N_homo      * int(L_homo / (Branchinterval_homo + 1)) * L_branch_homo * N_rep 
if EOLi==0:
    N_anion=0
else:
    N_anion = int((N_branch_poly+N_branch_homo)/EOLi)
N_total = N_branch_homo + N_branch_poly + N_polymer * L_polymer + N_homo * L_homo  + N_anion*3

overall = N_total+1
poly_perlayer=N_polymer/N_layer
surfarea=poly_perlayer/2/cdens
halflayervolume = (N_total/density-surfarea*bondb*(N_layer*2-1))/N_layer/2 # half of each layer
xy=surfarea**0.5
h=halflayervolume/surfarea # heigth of halflayer
H=h*N_layer*2+(N_layer*2-1)*bondb # heigth of box



resid = 0
tmpcount_bcp=int(L_polymer + (LA / (Branchinterval_poly + 1)) * L_branch_poly*N_rep)+1
tmpcount_hp=int(L_homo + (L_homo / (Branchinterval_homo + 1)) * L_branch_homo*N_rep)+1
cbcp = np.zeros((N_polymer+1,tmpcount_bcp, 3))
chp = np.zeros((N_homo+1,tmpcount_hp, 3))

alength = np.zeros(N_polymer)
index = 0

print ()
print ("Total number of beads:", N_total)
print ("Total number of ions: ", N_anion*3)
print ("[EO]/[Li+]:           ", EOLi)
print ("Number of BCP:        ", N_polymer)
print ("density:              ", density)
print ("metric:             %10.4f %10.4f %10.4f\n\n" % (xy, xy, H))




def randomwalk(bond):
    theta = np.random.rand() * 2 * np.pi
    dz = 2 * np.random.rand() - 1
    dx = np.sqrt(1 - dz**2) * np.cos(theta)
    dy = np.sqrt(1 - dz**2) * np.sin(theta)
    r = np.sqrt(dx**2 + dy**2 + dz**2)
    scale = bond / r
    dx *= scale
    dy *= scale
    dz *= scale
    return np.array([dx, dy, dz])


# construct BCP
for i in range(1,N_polymer+1):             #constract backbone of BCP
    ind_branch = 0
    for j in range(1,LB+1):                #construct B block 
        dx, dy, dz = randomwalk(bondb)
        tmpind = LA + j
        if j == 1:
            cbcp[i][tmpind, :] = [0, 0, 0]
        if j > 1:
            cbcp[i][tmpind,:] = cbcp[i][tmpind - 1,:] + [dx, dy, dz]
            if cbcp[i][tmpind,2]>0:
                cbcp[i][tmpind,2]+=-2*dz
            if cbcp[i][tmpind,2]<-H/3*(1-F_A):               
                cbcp[i][tmpind,2]+=-2*dz   


    for j in range(1,LA+1):                #construct A block
        dx, dy, dz = randomwalk(bondb)
        tmpind = LA - (j - 1)
        if j == 1:
            cbcp[i][tmpind, :] = [dx, dy, dz]
            if cbcp[i][tmpind,2]<=0:
                cbcp[i][tmpind,2]+=-2*dz
            if cbcp[i][tmpind,2]>H/3*F_A:
                cbcp[i][tmpind,2]+=-2*dz
        if j > 1:
            cbcp[i][tmpind, :] = cbcp[i][tmpind + 1, :] + [dx, dy, dz]
            if cbcp[i][tmpind,2]<=0:
                cbcp[i][tmpind,2]+=-2*dz
            if cbcp[i][tmpind,2]>H/3*F_A:
                cbcp[i][tmpind,2]+=-2*dz




    for j1 in range(1,LA+1):                #construct branches on A block

        tmp = 1 + (j1 - 1) * (1 + Branchinterval_poly)# determine the position of grafted point on backbone
        for k in range(1,N_rep+1):
            for j2 in range(1,L_branch_poly+1):
                dx, dy, dz = randomwalk(bonda)
                ind_branch += 1
                if j2 == 1:
                    cbcp[i][LA + LB + ind_branch, :] = cbcp[i][tmp, :] + [dx, dy, dz]
                if j2 > 1:
                    cbcp[i][LA + LB + ind_branch, :] = cbcp[i][LA+LB+ind_branch-1, :] + [dx, dy, dz]
                if  cbcp[i][LA + LB + ind_branch, 2]<=0:
                    cbcp[i][LA + LB + ind_branch, 2]+=-2*dz   
                if  cbcp[i][LA + LB + ind_branch, 2]>H/3*F_A:
                    cbcp[i][LA + LB + ind_branch, 2]+=-2*dz    
#print(cbcp[50])
# construct HP
for i in range(1,N_homo+1):             #constract backbone of BCP
    ind_branch = 0
    for j in range(1,L_homo+1):                #construct homopolymer backbone
        dx, dy, dz = randomwalk(bondb)
        tmpind = L_homo - (j - 1)
        if j == 1:
            chp[i][tmpind, :] = [dx, dy, dz]
        if j > 1:
            chp[i][tmpind, :] = chp[i][tmpind + 1, :] + [dx, dy, dz]             
    for j1 in range(1,L_homo+1):                #construct branches on A block
        tmp = 1 + (j1 - 1) * (1 + Branchinterval_homo)# determine the position of grafted point on backbone
        for k in range(1,N_rep+1):
            for j2 in range(1,L_branch_homo+1):
                dx, dy, dz = randomwalk(bonda)
                ind_branch += 1
                if j2 == 1:
                    chp[i][L_homo + ind_branch, :] = chp[i][tmp, :] + [dx, dy, dz]
                if j2 > 1:
                    chp[i][L_homo + ind_branch, :] = chp[i][L_homo+ind_branch-1, :] + [dx, dy, dz]


index = 0
# asign the position of polymer
k=0
for j in range(1,int(0.5*N_polymer)+1):
    
    k+=1
    if k>=N_layer+1:
        k=1
 #   print(k)
    index += 1
    zplane =  H/N_layer*(1-F_A) + (k-1)*(H/N_layer)
    xplane = np.random.rand() * xy
    yplane = np.random.rand() * xy
    tmp=cbcp[j]     
    cbcp[j][:,0]+=xplane
    cbcp[j][:,1]+=yplane
    cbcp[j][:,2]+=zplane

for j in range(N_polymer-int(0.5*N_polymer)+1,N_polymer+1):
    
    k+=1
    if k>=N_layer+1:
        k=1
    index += 1
    zplane =  H/N_layer + (k-1)*(H/N_layer)
    xplane = np.random.rand() * xy
    yplane = np.random.rand() * xy
    tmp=cbcp[j]  
    cbcp[j][:,0]+=xplane
    cbcp[j][:,1]+=yplane
    cbcp[j][:,2]=-cbcp[j][:,2]
    cbcp[j][:,2]+=zplane

    



for j in range(1,N_homo+1):
    index += 1
    zplane = np.random.rand() * xy
    xplane = np.random.rand() * xy
    yplane = np.random.rand() * xy
    tmp=chp[j]     
    chp[j][:,0]+=[i+xplane for i in np.zeros(len(tmp[:,1]))]
    chp[j][:,1]+=[i+yplane for i in np.zeros(len(tmp[:,1]))]
    chp[j][:,2]+=[i+zplane for i in np.zeros(len(tmp[:,1]))]



index = 0
overall=int(overall)
atomid = np.zeros(overall)
chainid = np.zeros(overall)
charge = np.zeros(overall)
typeid = np.zeros(overall)
position = np.zeros((overall, 3))
imagenumber = np.zeros((overall, 3),dtype=int)
anionposition = np.zeros((N_anion+1, 3))

#generate the info of BCP
for i in range(1,N_polymer+1):
    cbcptmp = cbcp[i]
    for j in range(1,L_polymer+1):
        index = index + 1
        atomid[index] = index
        chainid[index] = i
        charge[index] = 0
        if j <= LA:
            typeid[index] = bcpbackboneAty
        else:
            typeid[index] = bcpbackboneBty
        position[index, :] = cbcptmp[j, :]
        imagenumber[index, :] = [0, 0, 0]

index_1_backbone_BCP=index
indexb = index

#generate the info of branch
for i in range(1,N_polymer+1):
    cbcptmp = cbcp[i]
    tmp = 0
    for k in range(1,N_rep+1):
        for k1 in range(1,int(LA / (Branchinterval_poly + 1))+1):
            for j in range(1,L_branch_poly+1):
                tmp = tmp + 1
                index = index + 1
                atomid[index] = index
                chainid[index] = i
                charge[index] = 0
                typeid[index] = bcpbranchty
                position[index, :] = cbcptmp[L_polymer + tmp, :]
                imagenumber[index, :] = [0, 0, 0]


index_backbone_and_branch_BCP=index
#anionposition = anionposition[anionposition[:, 0] != 0]

#generate the info of homopolymer
for i in range(1,N_homo+1):
    chptmp = chp[i]
    for j in range(1,L_homo+1):
        index = index + 1
        atomid[index] = index
        chainid[index] = i+N_polymer
        charge[index] = 0
        typeid[index] = bcpbackboneAty
        position[index, :] = chptmp[j, :]
        imagenumber[index, :] = [0, 0, 0]
    
index_homo_backbone=index

for i in range(1,N_homo+1):
    chptmp = chp[i]
    tmp = 0
    for k in range(1,N_rep+1):
        for k1 in range(1,int(L_homo / (Branchinterval_homo + 1))+1):
            for j in range(1,L_branch_homo+1):
                tmp = tmp + 1
                index = index + 1
                atomid[index] = index
                chainid[index] = i+N_polymer
                charge[index] = 0
                typeid[index] = bcpbranchty
                position[index, :] = chptmp[L_homo + tmp, :]
                imagenumber[index, :] = [0, 0, 0]

index_homo_branch=index

#generate the info of cations    
N_cation = N_anion
jud=0
for i in range(1,N_cation+1):
    jud+=1
    if jud>=N_layer+1:
        jud=1
    index = index + 1
    atomid[index] = index
    chainid[index] = N_polymer + N_homo + i
    charge[index] = 1
    typeid[index] = cationty
    position[index , :] = [np.random.rand() * xy,np.random.rand() * xy, H/N_layer*(1-F_A) + (jud-1)*H/N_layer + np.random.rand() * H/N_layer*F_A    ]
    imagenumber[index , :] = [0, 0, 0]
#generate the info of Tf1:   
jud=0
for i in range(1,N_anion+1):
    jud+=1
    if jud>=4:
        jud=1
    index = index + 1
    atomid[index] = index
    chainid[index] = N_polymer + N_homo + N_cation + i
    charge[index] = -0.87

    typeid[index] = anionAty
    position[index, :] = [np.random.rand() * xy,np.random.rand() * xy, H/N_layer*(1-F_A) + (jud-1)*H/N_layer + np.random.rand() * H/N_layer*F_A    ]
    imagenumber[index, :] = [0, 0, 0]
#generate the info of Tf2:  
for i in range(1,N_anion+1):
    dx, dy, dz = randomwalk(bonda)
    index = index + 1
    atomid[index] = index
    chainid[index] = N_polymer + N_homo + N_cation + i
    charge[index] = -0.13
    typeid[index] = anionBty
    position[index, :] = position[index-N_anion, :]  + [dx,dy,dz]
    imagenumber[index, :] = [0, 0, 0]
print(charge)

#generate the bond parameters
bi = 0
est = (L_polymer - 1) *N_polymer +  N_rep  * L_branch_poly * int(LA / (Branchinterval_poly + 1))     * N_polymer \
     +(L_homo - 1)    *N_homo    +  N_rep  * L_branch_homo * int(L_homo / (Branchinterval_homo + 1)) * N_homo + \
     N_anion +  1

A1 = np.zeros(est)
A2 = np.zeros(est)
B1 = np.zeros(est)
Btype = np.zeros(est)
check = np.zeros(est)
check2 = np.zeros(est)
#generate the bond info of backbone of BCP
for i in range(1,N_polymer+1):
    for j in range(1,1 + L_polymer - 1):
        bi = bi + 1
        if j == 1:
            A1[bi] = 1 + (i - 1) * L_polymer
            A2[bi] = A1[bi] + 1
        if j > 1:
            A1[bi] = A2[bi-1]
            A2[bi] = A1[bi] + 1
        check[bi] =     (position[int(A1[bi]), 0] - position[int(A2[bi]), 0])**2 + \
                        (position[int(A1[bi]), 1] - position[int(A2[bi]), 1])**2 + \
                        (position[int(A1[bi]), 2] - position[int(A2[bi]), 2])**2
        B1[bi] = bi
        if j > LA:
            Btype[bi] = bcpbackboneBbty
        else:
            Btype[bi] = bcpbackboneAbty

cp_polymer = bi

#generate the bond info of branch of BCP                    
for i in range(1,N_polymer+1):
    for j in range(1,int(LA / (Branchinterval_poly + 1))+1):
        Branch_position = 1 + (i - 1) * L_polymer + (j - 1) * (Branchinterval_poly + 1)
        for l in range(1,N_rep+1):
            for k in range(1,L_branch_poly + 1):
                bi = bi + 1
                if k == 1:
                    A1[bi] = Branch_position
                    if i == 1 and j == 1:
                        A2[bi] = Branch_position + indexb + (l - 1) * L_branch_poly
                    else:
                        A2[bi] = A2[bi-1] + 1
                    Btype[bi]=abtyp                    
                else:
                    A1[bi] = A2[bi-1]
                    A2[bi] = A1[bi] + 1
                    Btype[bi] = bcpbranchbty
                check[bi] = (position[int(A1[bi]), 0] - position[int(A2[bi]), 0])**2 + \
                            (position[int(A1[bi]), 1] - position[int(A2[bi]), 1])**2 + \
                            (position[int(A1[bi]), 2] - position[int(A2[bi]), 2])**2
                if  abs(check[bi] - bonda**2) > 0.1 and abs(check[bi] - bondb**2) > 0.1 and abs(check[bi] - bondc**2) > 0.1:
                    print('Warning: bond between %i and %i is wrong, length is: %.3f '% (int(A1[bi]),int(A2[bi]),check[bi]))

                #print('%.3f %.3f %.3f\n' % (int(A1[bi]), int(A2[bi]) ,check[bi]))
                B1[bi] = bi
                

cp_bcp_branch = bi

#generate the bond info of backbone of HP

for i in range(1,N_homo+1):
    for j in range(1,1 + L_homo - 1):
        bi = bi + 1
        if j == 1:
            A1[bi] = 1 + (i - 1) * L_homo  + index_backbone_and_branch_BCP
            A2[bi] = A1[bi] + 1 
        if j > 1:
            A1[bi] = A2[bi-1]
            A2[bi] = A1[bi] + 1
        check[bi] =     (position[int(A1[bi]), 0] - position[int(A2[bi]), 0])**2 + \
                        (position[int(A1[bi]), 1] - position[int(A2[bi]), 1])**2 + \
                        (position[int(A1[bi]), 2] - position[int(A2[bi]), 2])**2
        if  abs(check[bi] - bonda**2) > 0.1 and abs(check[bi] - bondb**2) > 0.1 and abs(check[bi] - bondc**2) > 0.1:
            print('Warning: bond between %i and %i is wrong, length is: %.3f '% (int(A1[bi]),int(A2[bi]),check[bi]))
        B1[bi] = bi
        Btype[bi] = bcpbackboneAbty   


#generate the bond info of branch of HP                    
for i in range(1,N_homo+1):
    for j in range(1,int(L_homo / (Branchinterval_homo + 1))+1):
        Branch_position = 1 + (i - 1) * L_homo + (j - 1) * (Branchinterval_homo + 1) + index_backbone_and_branch_BCP
        for l in range(1,N_rep+1):
            for k in range(1,L_branch_homo + 1):
                bi = bi + 1
                if k == 1:
                    A1[bi] = Branch_position
                    if i == 1 and j == 1:
                        A2[bi] = Branch_position + N_homo*L_homo + (l - 1) * L_branch_homo
                    else:
                        A2[bi] = A2[bi-1] + 1
                    Btype[bi]=abtyp                    
                else:
                    A1[bi] = A2[bi-1]
                    A2[bi] = A1[bi] + 1
                    Btype[bi] = bcpbranchbty
                check[bi] = (position[int(A1[bi]), 0] - position[int(A2[bi]), 0])**2 + \
                            (position[int(A1[bi]), 1] - position[int(A2[bi]), 1])**2 + \
                            (position[int(A1[bi]), 2] - position[int(A2[bi]), 2])**2
                if  abs(check[bi] - bonda**2) > 0.1 and abs(check[bi] - bondb**2) > 0.1 and abs(check[bi] - bondc**2) > 0.1:
                    print('Warning: bond between %i and %i is wrong, length is: %.3f '% (int(A1[bi]),int(A2[bi]),check[bi]))

                #print('%.3f %.3f %.3f\n' % (int(A1[bi]), int(A2[bi]) ,check[bi]))
                B1[bi] = bi

#generate the bond info of backbone of Tf
for i in range(1,N_anion+1):
    bi = bi + 1
    A1[bi] = index_homo_branch+N_cation+i
    A2[bi] = index_homo_branch+2*N_cation+i
    check[bi] =     (position[int(A1[bi]), 0] - position[int(A2[bi]), 0])**2 + \
                    (position[int(A1[bi]), 1] - position[int(A2[bi]), 1])**2 + \
                    (position[int(A1[bi]), 2] - position[int(A2[bi]), 2])**2
    if  abs(check[bi] - bonda**2) > 0.1:
        print('Warning: bond between %i and %i is wrong, length is: %.3f '% (int(A1[bi]),int(A2[bi]),check[bi]))
    B1[bi] = bi
    Btype[bi] = anionbty
             
            
ai = 0
estangle = overall
An1 = np.zeros(estangle)
An2 = np.zeros(estangle)
An3 = np.zeros(estangle)
ai1 = np.zeros(estangle)
at = np.zeros(estangle)
#generate the angle info of branch of BCP  
for i in range(1,N_polymer+1):
    for j in range(1,1 + L_polymer - 2):
        ai = ai + 1
        if j == 1:
            An1[ai] = 1 + (i - 1) * L_polymer
            An2[ai] = An1[ai] + 1
            An3[ai] = An2[ai] + 1
        if j > 1:
            An1[ai] = An2[ai-1]
            An2[ai] = An1[ai] + 1
            An3[ai] = An2[ai] + 1
        at[ai] = bcpbackboneBaty
        ai1[ai] = ai
tmpa1=ai        
#generate the angle info of branch of BCP
for i in range(1,N_polymer+1):
    for j in range(1,int(LA / (Branchinterval_poly + 1))+1):
        Branch_position = 1 + (i - 1) * L_polymer + (j - 1) * (Branchinterval_poly + 1)
        for l in range(1,N_rep+1):
            for k in range(1,1+ L_branch_poly - 1):
                ai = ai + 1
                if k == 1:
                    An1[ai] = Branch_position
                    if i == 1 and j == 1:
                        An2[ai] = Branch_position + indexb + (l - 1) * L_branch_poly
                    else:
                        An2[ai] = An3[ai-1] + 1
                    An3[ai] = An2[ai] + 1
                    at[ai] = bcpbranchaty
                else:
                    An1[ai] = An2[ai-1]
                    An2[ai] = An1[ai] + 1
                    An3[ai] = An2[ai] + 1
                    at[ai] = bcpbranchaty
                ai1[ai] = ai
tmpa2=ai 
#generate the angle info of branch of HP 
for i in range(1,N_homo+1):
    for j in range(1,1 + L_homo - 2):
        ai = ai + 1
        if j == 1:
            An1[ai] = 1 + (i - 1) * L_homo + index_backbone_and_branch_BCP
            An2[ai] = An1[ai] + 1
            An3[ai] = An2[ai] + 1
        if j > 1:
            An1[ai] = An2[ai-1]
            An2[ai] = An1[ai] + 1
            An3[ai] = An2[ai] + 1
        at[ai] = bcpbackboneBaty
        ai1[ai] = ai
tmpa3=ai    
#generate the angle info of branch of HP
for i in range(1,N_homo+1):
    for j in range(1,int(L_homo/ (Branchinterval_homo + 1))+1):
        Branch_position = 1 + (i - 1) * L_homo + (j - 1) * (Branchinterval_homo + 1) + index_backbone_and_branch_BCP
        for l in range(1,N_rep+1):
            for k in range(1,1+ L_branch_homo - 1):
                ai = ai + 1
                if k == 1:
                    An1[ai] = Branch_position
                    if i == 1 and j == 1:
                        An2[ai] = Branch_position + L_homo*N_homo + (l - 1) * L_branch_homo
                    else:
                        An2[ai] = An3[ai-1] + 1
                    An3[ai] = An2[ai] + 1
                    at[ai] = bcpbranchaty
                else:
                    An1[ai] = An2[ai-1]
                    An2[ai] = An1[ai] + 1
                    An3[ai] = An2[ai] + 1
                    at[ai] = bcpbranchaty
                ai1[ai] = ai


                     
cp_bcp_branch = ai
checkangle1=np.zeros(overall)
checkangle2=np.zeros(overall)
for i in range(1,1+ai):
    checkangle1[i] = (position[int(An1[i]), 0] - position[int(An2[i]), 0])**2 + \
                     (position[int(An1[i]), 1] - position[int(An2[i]), 1])**2 + \
                     (position[int(An1[i]), 2] - position[int(An2[i]), 2])**2
    checkangle2[i] = (position[int(An2[i]), 0] - position[int(An3[i]), 0])**2 + \
                     (position[int(An2[i]), 1] - position[int(An3[i]), 1])**2 + \
                     (position[int(An2[i]), 2] - position[int(An3[i]), 2])**2
    if  abs(checkangle1[i] - bonda**2) > 0.1 and abs(checkangle1[i] - bondb**2) > 0.1 and abs(checkangle1[i] - bondc**2) > 0.1:
        print('Warning: angle between %i and %i is wrong, length is: %.3f '% (int(An1[i]),int(An2[i]),checkangle1[i]))





with open('bulk.lammps', 'w') as file:
    file.write('\n')
    file.write('#POEM length     {:>8}\n'.format(LA))
    file.write('#PS length       {:>8}\n'.format(LB))
    file.write('#Branches length {:>8} \n'.format(L_branch_poly))
    file.write('#[EO]/[Li]       {:>8}\n'.format(EOLi))
    file.write('#Number of ions  {:>8}\n'.format(N_anion*3))
    file.write('#Number of BCP   {:>8}\n'.format(N_polymer))
    file.write('\n')
    file.write('{:>8}     atoms\n'.format(N_total))
    file.write('{:>8}     bonds\n'.format(bi))
    file.write('{:>8}     angles\n'.format(ai))
    file.write('{:>8}     dihedrals\n'.format(0))
    file.write('\n')

    file.write('{:>8}     atom types\n'.format(int(max(typeid))))
    file.write('{:>8}     bond types\n'.format(int(max(Btype))))
    file.write('{:>8}     angle types\n'.format(int(max(at))))
    file.write('{:>8}     dihedral types\n'.format(0))
    file.write('\n')

    file.write('{:>16.3f} {:>8.3f} xlo xhi\n'.format(0, float(xy)))    
    file.write('{:>16.3f} {:>8.3f} ylo yhi\n'.format(0, float(xy)))
    file.write('{:>16.3f} {:>8.3f} zlo zhi\n'.format(0, float(H)))
    file.write('\n')
    file.write('Atoms\n')
    file.write('\n')

    for i in range(1,overall):
        file.write('{:>8} {:>8} {:>8} {:>8.2f} {:>8.3f} {:>8.3f} {:>8.3f} {:>8} {:>8} {:>8}\n'.format(int(atomid[i]),
                   int(chainid[i]), int(typeid[i]), float(charge[i]), position[i, 0], position[i, 1], position[i, 2], imagenumber[i, 0],
                   imagenumber[i, 1], imagenumber[i, 2]))

    file.write('\n')
    file.write('Bonds\n')
    file.write('\n')

    for i in range(1,bi+1):
        file.write('{:>8} {:>8} {:>8} {:>8}\n'.format(int(B1[i]), int(Btype[i]), int(A1[i]), int(A2[i])))

    file.write('\n')
    file.write('Angles\n')
    file.write('\n')

    for i in range(1,ai+1):
        file.write('{:>8} {:>8} {:>8} {:>8} {:>8}\n'.format(int(ai1[i]), int(at[i]), int(An1[i]), int(An2[i]), int(An3[i])))
    
        
    file.write('\n')
    file.write('Masses\n')
    file.write('\n')
    for i in range(1,int(max(typeid))+1):
        file.write('     %i  %.2f\n'% (i,float(mass[i])))
